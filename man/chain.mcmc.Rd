% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Parallel.R
\name{chain.mcmc}
\alias{chain.mcmc}
\title{Parallel MCMC on Subsets}
\usage{
chain.mcmc(
  chains,
  para,
  startval,
  niter,
  X,
  prior,
  likelihood,
  propvar = NULL,
  burn.rate = 0.1,
  random = T,
  num
)
}
\arguments{
\item{chains}{Number of subsets in the simulation. Used when a divide-and-conquer algorithm is employed}

\item{para}{Parameters to be estimate.}

\item{startval}{Initial value of the chain.}

\item{niter}{Number of iterations (including burned iterations).}

\item{X}{Matrix of observations from the underlying model.}

\item{prior}{Prior function for the parameters.}

\item{likelihood}{Likelihood function.}

\item{propvar}{The diagonal of the variance matrix for the proposal distribution. If no value is specified, the identify matrix is used.}

\item{burn.rate}{The percentage of iterations to be burned.}

\item{random}{If true, the rows of X are shuffled prior to the split.}

\item{num}{Numerator of the sub-posterior exponent (Wu and Robert, 2019). Used when a divide-and-conquer algorithm is employed.}
}
\value{
Returns a nested list. Each element in the list corresponds to an output from \code{\link{mcmc.sub}}.
}
\description{
Takes a dataset X, subdivides it into an inputted number of subsets, and runs an MCMC on each subset in parallel.
}
\details{
In the divide-and-conquer scheme, the data set \eqn{X} is divided into \eqn{K} subsets \eqn{X_k}. The subposterior for subset \eqn{X_k} is thus
\deqn{\pi_k(\theta | X_k) ‚àù (\pi(\theta)^(1/K) \prod p(x|\theta))^\lambda}
See Wu and Robert (2019) for more details.
}
\examples{
#Parameter Estimation for Data from a Normal Distribution

#Prior
prior<-function(param){
  ifelse(all(param>0), 1, 0)
}

#Likelihood function
normal.likelihood<-function(X, param){
  mu=param[1]
  sigma=param[2]
  sum(dnorm(x=X, mean=mu, sd=sigma, log=TRUE))
}

#Simulate data
X<-rnorm(100, 2, 1.2)

#Parameters
param<-c("mu", "sigma")
niter<-10000
startval<-c(1, 1)
chains<-4

df<-chain.mcmc(chains,param, startval, niter=niter, X=X, prior=prior,
               likelihood=normal.likelihood, propvar=0.25, random=TRUE, num=1)
}
\references{
Changye Wu and Christian P. Robert. Parallelising MCMC via Random Forests. arXiv e-prints, art. arXiv:1911.09698, 2019.
}
